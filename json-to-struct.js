$(document).ready(function(){
  var go =""

  //KeyMap is used as map instead of array for future use.
  var keyMap = new Map();
  var tab = 0

//  var data ='{"Header": "headerdata", "body":{"body1": "body1data", "body2": {"la": {"fa":"tuku"}}}, "tail":{"tick": "tock"}}'
var data = '{"Header":{"ImmediateDestination":291270649,"ImmediateOrigin":291270649},"Batches":[{"BatchHeader":{"ServiceClassCode":200,"CompanyName":"MCJKFIS"},"Entries":[{"TransactionCode":22,"CheckDigit":4},{"TransactionCode":22,"RDFIIdentification":33333333}],"BatchControl":{"ServiceClassCode":200,"EntryAddendaCount":3}}],"Control":{"BatchCount":1,"EntryAddendaCount":3}}'
  //var data =""
  $("#convertData").click(function(){
    go = ""
    data = $("#jsonContent").text();
    data = data.replace(/\s+/g, " ");
    console.log("Data ready() ::::", data);
    //return;
      convertToStruct("",JSON.parse(data));
      var mapIter = keyMap.values();
      //var mapData = new Map();
      finalData =[]
      console.log("data in keyMap", keyMap);
      for (var i=0;i<keyMap.size; i++){
        finalData[i]=mapIter.next().value;
      }
      console.log("finalData", finalData);
      for(var j=finalData.length-1; j>=0;j--){
        console.log("inside finalData");
        appendString(finalData[j])
      }
      $("#showStruct").empty()
      $( "#showStruct" ).append("<p>"+go+"</p>");
      console.log("Final data ::::", go);
  });

function convertToStruct(keyName, objectData){
  if(keyName == ""){
    keyName = "AutoGenerated"
  }

  console.log("keyName convertToStruct()",keyName)
  console.log("data convertToStruct():::", objectData);
  var str = JSON.stringify(objectData);
  console.log("data received",str)
  var nestedGo ="";

  var jsonObject;
  try {
      jsonObject = JSON.parse(str);
  } catch (e) {
      console.log("invalid json format");
      return;
  }
  nestedGo += "type "+firstLetterUppercase(keyName)+" struct {\n"
  console.log("nested go till now 1 ", nestedGo);
  for(var k in jsonObject){
    console.log("k :::", k)
    if( goType(jsonObject[k]) === "struct"){
      console.log("nested go till now 2 ", nestedGo);
      convertToStruct(firstLetterUppercase(k), jsonObject[k] )
      console.log("nested go till now 3 ", nestedGo);
    }
    if(goType(jsonObject[k]) === "slice"){
      nestedGo += "\t"+firstLetterUppercase(k)+" []"+k+' `json:"'+k+'"`\n'
      parseData(k,jsonObject[k])
    }else{
      if(goType(jsonObject[k]) === "struct"){
        nestedGo += "\t"+firstLetterUppercase(k)+" "+k+' `json:"'+k+'"`\n'
      }else
        nestedGo += "\t"+firstLetterUppercase(k)+" "+goType(jsonObject[k])+' `json:"'+k+'"`\n'
    }

  }
  nestedGo +="}\n"
  console.log("nestedGo",nestedGo);
  keyMap.set(keyName, nestedGo)

}



function goType(val){
  switch (typeof val)
		{
			case "string":
					return "string";
			case "number":
				if (val % 1 === 0)
				{
						return "int";
				}
				else
					return "float64";
			case "boolean":
				return "bool";
			case "object":
      //  console.log("inside object");
				if (Array.isArray(val))
					return "slice";
				return "struct";
			default:
				return "notFound";
		}

}


function appendString(str){
  console.log("data to append", str);
  go += str;

}

function firstLetterUppercase(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
}


function parseData(keyName,scope){
  var mapData = new Map();
  //mapData["name"]="my name";
  if (Array.isArray(scope)){
    console.log("recieved data in parseData()", scope);
      var scopeLength = scope.length;
      var nestedGo =""
      nestedGo += "type "+firstLetterUppercase(keyName)+" struct {\n"
      for (var i = 0; i < scopeLength; i++){
        var str = JSON.stringify(scope[i]);
        var jsonObject = JSON.parse(str);
        //Check if the jsonObject is json or not
        if(!(typeof jsonObject == 'object')){
          console.log("type is not json")
          return;
        }

        console.log("jsonObject in parseData()", jsonObject);
        for(var k in jsonObject){
          if(!mapData.hasOwnProperty(k)){
            mapData[k] = goType(jsonObject[k])
          }
        }

      }
      for (var k in mapData){
        if(mapData[k] ==="slice"){
            nestedGo += "\t"+firstLetterUppercase(k)+" []"+k+' `json:"'+k+'"`\n'
            console.log("keyname",k);
            console.log("keydata",jsonObject[k]);
            parseData(k, jsonObject[k])
        }else{
          if(mapData[k] ==="struct"){
            convertToStruct(k, jsonObject[k])
            nestedGo += "\t"+firstLetterUppercase(k)+" "+k+' `json:"'+k+'"`\n'
          }else
            nestedGo += "\t"+firstLetterUppercase(k)+" "+mapData[k]+' `json:"'+k+'"`\n'
        }

      }
      nestedGo += "}\n"
      console.log("nestedGo yo::::", nestedGo);
      keyMap.set(keyName, nestedGo)
  }
}
});


//TODO add omitempty in json where it is necessary
//TODO data display in random order
//TODO if the key name is same as the another key name which is nested then it creates problem
